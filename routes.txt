1.Create the Database Tables:
    Open your web browser and navigate to http://localhost:5050
    Log in to PgAdmin using the credentials from your docker-compose.yml 
        admin@example.com  
        admin
    In the PgAdmin interface:
    Right-click on "Servers" -> "Create" -> "Server...".
    In the "General" tab, give it a name like Docker Postgres.
    In the "Connection" tab:
    Host name/address: postgres (This is the service name from docker-compose.yml!)
    Port: 5432
    Maintenance database: saas_db
    Username: myuser
    Password: mypassword
    Click "Save".
    You should now be connected! Navigate to "Databases" -> "saas_db" -> "Schemas" -> "public".
    Right-click on "Tables" -> "Query Tool".
    Paste and run the following SQL code to create your tables:

    CREATE TABLE tenants (
        id SERIAL PRIMARY KEY,
        organization_name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        tenant_id INTEGER NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE tenant_devices (
        id SERIAL PRIMARY KEY,
        tenant_id INTEGER NOT NULL REFERENCES tenants(id) ON DELETE CASCADE,
        librenms_device_id INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE (tenant_id, librenms_device_id) -- A tenant can't own the same device twice
    );

2.Test with Postman/Insomnia:
    Test Registration:
    Create a new POST request to http://localhost:3000/api/register
    In the "Body" tab, select "raw" and "JSON".
    Enter the following JSON:

    {
    "organizationName": "My First Company",
    "email": "test@example.com",
    "password": "password123"
    }

    Send the request. You should get a 201 Created response!
    Verify in PgAdmin: Go back to PgAdmin, right-click your users table, and select "View/Edit Data" -> "All Rows". You should see your new user!
    Test Login:
    Create a new POST request to http://localhost:3000/api/login
    Use the same JSON body format:

    {
    "email": "test@example.com",
    "password": "password123"
    }
    Send the request. You should get a 200 OK response containing a JWT token.


    LibreNMS UI: http://localhost:8000 (complete the first-run wizard if not done).
    PgAdmin: http://localhost:5050 (login with admin@example.com/admin).
    SaaS backend: http://localhost:3000.
    SaaS frontend: http://localhost:8081 (dev server).


    **If I do a volume clean of the container "docker compose down -v"
    while the container running:
        docker exec -it librenms_engine bash
        lnms config:set schedule_type.poller dispatcher
        lnms config:set schedule_type.services dispatcher
        lnms config:set schedule_type.discovery dispatcher
        exit

    **How to create username & password for librenms, run the command in the terminal
        Replace admin with your desired username
        Replace password with your desired password
        Replace admin@example.com with your email
        docker exec -it librenms_engine php /opt/librenms/artisan user:add admin -r admin -p pass123 -e admin@example.com
        
        (for now we leave this as possible)
    **At first the librenms database is using the wrong "sorting rules" (collation). 
    Think of it like using the wrong alphabet order - it works mostly, but can cause problems with special characters.
    to fix, run this command and type "y"
        docker exec -it -u librenms librenms_engine php /opt/librenms/validate.php

    TO se what port the service inside docker is listening to 
    desu@MainDesu:~$ docker exec -it librenms_engine netstat -tlnp | grep :80
    tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      -
    tcp        0      0 :::8000                 :::*                    LISTEN      -

    Test libreNMS API with postman:
    1.Open Postman.
    2.Create a new request:
        Method: GET
        URL: http://localhost:8000/api/v0/system
            Why? We are sending this request from our PC (where Postman lives), so we use localhost and the port 8000 that we mapped to the LibreNMS container.
    3.Add the Authentication Header:
        Go to the Headers tab.
        In a new row, add the following:
        KEY: X-Auth-Token
        VALUE: Paste the full API token string you copied and saved (NOT the short "Token Hash").
    4.Send the Request

    Use Postman Again: This time, we will test our own backend endpoint.
        Method: GET
        URL: http://localhost:3000/api/test-librenms
        You do not need any headers for this request.

    For testing snmpsim
        Disable Duplicate sysName Detection
        docker exec -it librenms_engine bash
        /opt/librenms/lnms config:set allow_duplicate_sysName true
        exit
        /opt/librenms/lnms config:set allow_duplicate_sysName false    #to re enabled the service, once we move on from testing

    Test via Postman
        POST: http://localhost:3000/api/devices
        {
            "hostname": "snmpsim_device_2",
            "snmp_community": "demo"
        }